BUILDING AND INSTALLING

    Full instructions:
        See doc/html/building.html

    Quick instructions:
        ./bootstrap
        ./configure
        make
        make check
        sudo make install

SYSTEM REQUIREMENTS

    REDHAT/CENTOS 5.x

        Required: sudo yum install gcc-c++ automake autoconf libtool libxml2 libxml2-devel
        Optional: sudo yum install postgresql-devel ruby-devel postgresql-server mysql-server mysql-client mysql-devel libxslt

    UBUNTU

        Required: sudo apt-get install g++ automake libtool libxml2 libxml2-dev
        Optional: sudo apt-get install ruby ruby-dev libmysqlclient-dev libpq-dev mysql-server postgresql xsltproc

OPTIONAL DEPENDENCIES FOR EXTRA PERFORMANCE

        Boost (www.boost.org)
        Google Sparse Hash (code.google.com/p/sparsehash/)
        Intel Threading Building Blocks (www.threadingbuildingblocks.org)


    LINUX

        ./configure --with-boost=<path> --with-sparsehash=<path> 
           --with-tbb=<path> --with-tbb-arch=<library subdir>

        Example:

        Boost installed in /usr/local/boost
        Sparsehash installed in /usr/local/include
        TBB installed in /opt/intel/tbb

        ./configure --with-boost=/usr/local/boost 
               --with-sparsehash=/usr/local 
               --with-tbb=/opt/intel/tbb
               --with-tbb-arch=intel64/gcc4.4

    WINDOWS

        Configure Boost, TBB and Sparsehash settings by changing User Macros
        defined in OptionalSettings_vs9.vsprops for Visual Studio 2008 or 
        OptionalSettings_vs11.props for Visual Studio 2012 via Property Manager
        or manually. 

        Example:

        BOOST_INCLUDE      C:\boost
        TBB_INCLUDE        C:\tbb42_20130725oss\include
        SPARSEHASH_INCLUDE C:\google\src;C:\google\src\windows
        BOOST_LIB          C:\boost\lib32-msvc-11.0
        TBB_LIB            C:\tbb42_20130725oss\lib\ia32\vc11
        TBB_DEPS           tbb.lib;tbbmalloc.lib
        WITH_BOOST         HAVE_BOOST=1
        WITH_TBB           HAVE_TBB=1
        WITH_SPARSEHASH    HAVE_SPARSEHASH=1

        Then continue with the build using DebugBoost or ReleaseBoost build targets.

PLATFORM-SPECIFIC NOTES

        Use --with-sso configure option to enable short string optimization on platforms
        which use GLIBC for extra 10-15% improvement. This does not apply to Visual Studio
        builds as string implementation shipped with it already employs this optimization.

        Recommended environment for G++ on Nehalem and above:
        CXXFLAGS="-O3 -march=core2 -msse4.2 -falign-functions=16 -falign-jumps=16"

        There is a 15-20% performance regression with g++ 4.7.x compared to 4.4.x.
        There is a 10-15% performance increase when going from Visual Studio 2008 to 2012.

        G++ builds enable use of custom SSE2 assembly code which is not yet compatible with -mavx. 

        Visual Studio builds need to use /Ox optimization level for best performance.
