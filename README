BUILDING AND INSTALLING

    Full instructions:
        See doc/html/building.html

    Quick instructions:
        ./bootstrap
        ./configure
        make
        make check
        sudo make install

VERSION-SPECIFIC NOTES

	Supported FIX tag value range is 1-99999999. 


SYSTEM REQUIREMENTS

    REDHAT/CENTOS 5.x

        Required: sudo yum install gcc-c++ automake autoconf libtool
		  libxml2 libxml2-devel
        Optional: sudo yum install postgresql-devel ruby-develpostgresql-server
		  mysql-server mysql-client mysql-devel libxslt

    UBUNTU

        Required: sudo apt-get install g++ automake libtool libxml2 libxml2-dev
        Optional: sudo apt-get install ruby ruby-dev libmysqlclient-dev
		  libpq-dev mysql-server postgresql xsltproc


OPTIONAL DEPENDENCIES FOR EXTRA PERFORMANCE

        Boost (www.boost.org)
        Google Sparse Hash (code.google.com/p/sparsehash/)
        Intel Threading Building Blocks (www.threadingbuildingblocks.org)


    LINUX

        ./configure --with-boost=<path> --with-sparsehash=<path> 
           --with-tbb=<path> --with-tbb-arch=<library subdir>

        Example:

        Boost installed in /usr/local/boost
        Sparsehash installed in /usr/local/include
        TBB installed in /opt/intel/tbb

        ./configure --with-boost=/usr/local/boost 
               --with-sparsehash=/usr/local 
               --with-tbb=/opt/intel/tbb
               --with-tbb-arch=intel64/gcc4.4

    WINDOWS

        Configure Boost, TBB and Sparsehash settings by changing User Macros
        defined in OptionalSettings_vs9.vsprops for Visual Studio 2008 or 
        OptionalSettings_vs11.props for Visual Studio 2012 via Property Manager
        or manually. 

        Example:

        BOOST_INCLUDE      C:\boost
        TBB_INCLUDE        C:\tbb42_20130725oss\include
        SPARSEHASH_INCLUDE C:\google\src;C:\google\src\windows
        BOOST_LIB          C:\boost\lib32-msvc-11.0
        TBB_LIB            C:\tbb42_20130725oss\lib\ia32\vc11
        TBB_DEPS           tbb.lib;tbbmalloc.lib
        WITH_BOOST         HAVE_BOOST=1
        WITH_TBB           HAVE_TBB=1
        WITH_SPARSEHASH    HAVE_SPARSEHASH=1

        Then continue with the build using DebugBoost or ReleaseBoost build targets.


PLATFORM-SPECIFIC NOTES

        Use --with-sso configure option to enable short string optimization on platforms
        which use GLIBC for extra 10-15% improvement. This does not apply to Visual Studio
        builds as string implementation shipped with it already employs this optimization.

        Recommended environment for G++ on Nehalem and above:
        CXXFLAGS="-O3 -march=core2 -msse4.2 -falign-functions=16 -falign-jumps=16" or
		 "-O3 -march=corei7-avx -mavx -falign-functions=16 -falign-jumps=16"
	if AVX support is available.

        Using g++ 4.7.x is not recommenced as there is a sizable performance regression
	compared to versions 4.4.x or 4.8.x.

        Visual Studio builds need to use /Ox optimization level for best performance.


BENCHMARKS

System: Intel(R) Xeon(R) CPU E5-2690 0 @ 2.90GHz, CentOS 6.4, 
	running with sleep states disabled (performance-latency profile)

	g++ version: 4.8.3

Configuration:

	fix8 1.3.2	--with-tbb --with-mpmc=tbb
	Quickfix 1.13.3 --with-boost
	Quickfix 1.14.3 --with-boost --with-tbb --with-allocator=tbb
	quickerfix:	--with-boost --with-sparsehash --with-sso --with-tbb
			--with-allocator=tbb

	g++ options: -O3 -march=corei7-avx -mavx -falign-functions=16 -falign-jumps=16

	Lockless allocator library (locklessinc.com/downloads).

CODEC:	Measures encoding and decoding performance for a NewOrderSingle message.
	examples/codec/codec.cpp

	Command line:
	LD_PRELOAD=libllalloc.so taskset -c 9 ./codec
	LD_PRELOAD=libllalloc.so taskset -c 9 ./codec ../../spec/FIX44.xml

	Results (usec per message, lower is better):

		FIX8		Quickfix 	Quickfix 	quickerfix
		1.3.2		1.13.3		1.14.3		20150203

to string	2.25516		8.17674		4.38878		1.17468
from string	7.6158		25.7686		9.422		3.77316



PT:	Measures performance of various QuickFix subsystems
	src/pt.cpp

	Command line:
	LD_PRELOAD=libllalloc.so taskset -c 1,9 ./pt -p 1234 -c 1000000

	Results (operations per second, higher is better):

					Quickfix 	Quickfix 	quickerfix 
					1.13.3		1.14.3		20150203

Converting integers to strings: 	2.17391e+07	2.5e+07		2.59046e+07

Converting strings to integers:		1.66667e+08	2.5e+08		3.04856e+08

Converting doubles to strings:		1.10375e+06	1.04712e+06	8.58656e+06

Converting strings to doubles:		4.6729e+06	5.26316e+07	9.87741e+07

Creating Heartbeat messages:		1.00604e+06	1.54083e+06	2.97739e+06

Identifying message types:		6.99301e+06	6.99301e+06	6.97926e+06

Serializing Heartbeat messages
to strings:				847458		1.20627e+06	2.88192e+06

Serializing Heartbeat messages
from strings:				392003		625391		1.72036e+06

Serializing Heartbeat messages
from strings and validation:		-		541419		1.54632e+06

Creating NewOrderSingle messages:	331785		406669		789210
		        (packed):	-		-		838077

Serializing NewOrderSingle messages
to strings:				652316		925069		1.93774e+06

Serializing NewOrderSingle messages
from strings:				152346		290698		770339

Serializing NewOrderSingle messages
from strings and validation:		-		261438		675089

Creating QuoteRequest messages:		13621.9		20406.5		46620.3
		      (packed):		-		-		66100.7
	    (packed, in place):		-		-		97345.1

Serializing QuoteRequest messages
to strings:				174490		239292		412906

Serializing QuoteRequest messages
from strings:				16942.8		32526.7		81488.2

Serializing QuoteRequest messages
from strings and validation:		-		30869		62837.1

Reading fields from QuoteRequest
message:				28681.2		72695.6		118646

Storing NewOrderSingle messages:	299670		281057		350500

Validating NewOrderSingle messages
with no data dictionary:		5.64972e+06	5.74713e+06	8.75803e+06

Validating NewOrderSingle messages
with data dictionary:			345901		457247		619340

Validating QuoteRequest messages
with no data dictionary:		9.80392e+06	9.34579e+06	1.55676e+07

Validating QuoteRequest messages
with data dictionary:			478240		548847		769421

Sending/Receiving
NewOrderSingle/ExecutionReports
on Socket				59883.8		92489.8		203843

Sending/Receiving
NewOrderSingle/ExecutionReport
on ThreadedSocket			59862.3		92850.5		208473



